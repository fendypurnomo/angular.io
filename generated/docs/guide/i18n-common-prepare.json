{
  "id": "guide/i18n-common-prepare",
  "title": "Prepare templates for translations",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular/edit/master/aio/content/guide/i18n-common-prepare.md?message=docs%3A%20describe%20your%20change...\" aria-label=\"Suggest Edits\" title=\"Suggest Edits\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"prepare-templates-for-translations\">Prepare templates for translations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#prepare-templates-for-translations\"><i class=\"material-icons\">link</i></a></h1>\n<a id=\"template-translations\"></a>\n<p>To translate the templates of your application, prepare the text for a translator or translation service by marking text, attributes, and other elements with the Angular <code>i18n</code> attribute.\nComplete the following actions to mark text, attributes, and other elements with the Angular <code>i18n</code> attribute.</p>\n<ol>\n<li><a href=\"guide/i18n-common-prepare#mark-text-for-translations\" title=\"Prepare templates for translations | Angular\">Mark text for translations</a>.</li>\n<li><a href=\"guide/i18n-common-prepare#add-helpful-descriptions-and-meanings\" title=\"Add helpful descriptions and meanings - Prepare templates for translations | Angular\">Add helpful descriptions and meanings</a> to help the translator with additional information or context.</li>\n<li><a href=\"guide/i18n-common-prepare#translate-text-not-for-display\" title=\"Translate text not for display - Prepare templates for translations | Angular\">Translate text not for display</a>.</li>\n<li><a href=\"guide/i18n-common-prepare#mark-element-attributes-for-translations\" title=\"Mark element attributes for translations - Prepare templates for translations | Angular\">Mark element attributes for translations</a>, such as the <code>title</code> attribute of an image.</li>\n<li><a href=\"guide/i18n-common-prepare#mark-plurals-and-alternates-for-translation\" title=\"Mark plurals and alternates for translation - Prepare templates for translations | Angular\">Mark plurals and alternates for translation</a> in order to comply with the pluralization rules and grammatical constructions of different languages.</li>\n</ol>\n<h3 id=\"mark-text-for-translations\">Mark text for translations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-text-for-translations\"><i class=\"material-icons\">link</i></a></h3>\n<a id=\"i18n-attribute\"></a>\n<p>Mark the static text messages in your component templates for translation using the <code>i18n</code> attribute.\nPlace it on every element tag with fixed text to be translated.</p>\n<p>For example, the following <code>&#x3C;h1></code> tag displays a simple English language greeting, \"Hello i18n!\".</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"greeting\" header=\"src/app/app.component.html\">\n&#x3C;h1>Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>To mark the greeting for translation, add the <code>i18n</code> attribute to the <code>&#x3C;h1></code> tag.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute\" header=\"src/app/app.component.html\">\n&#x3C;h1 i18n>Hello i18n!&#x3C;/h1>\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p><code>i18n</code> is a custom attribute, recognized by Angular tools and compilers.\nAfter translation, the compiler removes it.\nIt is not an Angular directive.</p>\n</div>\n<h3 id=\"add-helpful-descriptions-and-meanings\">Add helpful descriptions and meanings<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#add-helpful-descriptions-and-meanings\"><i class=\"material-icons\">link</i></a></h3>\n<a id=\"help-translator\"></a>\n<p>To translate a text message accurately, the translator may need additional information or context.\nAdd a <em>description</em> of the text message as the value of the <code>i18n</code> attribute.\nThe following example displays the value of the <code>i18n</code> attribute.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-desc\" header=\"src/app/app.component.html\">\n&#x3C;h1 i18n=\"An introduction header for this sample\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>The translator may also need to know the meaning or intent of the text message within this particular application context, in order to translate it the same way as other text with the same meaning.\nStart the <code>i18n</code> attribute value with the <em>meaning</em> and separate it from the <em>description</em> with the <code>|</code> character: <code>&#x3C;meaning>|&#x3C;description></code>.</p>\n<p>For example, you may want to indicate that the <code>&#x3C;h1></code> tag is a site header that needs to be translated the same way, whether it's used as a header or referenced in another section of text.\nThe following example shows how to indicate that the <code>&#x3C;h1></code> tag needs to be translated as a header or referenced elsewhere.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-attribute-meaning\" header=\"src/app/app.component.html\">\n&#x3C;h1 i18n=\"site header|An introduction header for this sample\">Hello i18n!&#x3C;/h1>\n\n</code-example>\n<p>The result is any text marked with <code>site header</code>, as the <em>meaning</em> is translated exactly the same way.</p>\n<!-- section break -->\n<a id=\"transaction-unit-ids\"></a>\n<div class=\"callout is-helpful\">\n<header>How meanings control text extraction and merging</header>\n<p>The Angular extraction tool generates a translation unit entry for each <code>i18n</code> attribute in a template.\nThe Angular extraction tool assigns each translation unit a unique ID based on the <em>meaning</em> and <em>description</em>.\nFor more information about the Angular extraction tool, see <a href=\"guide/i18n-common-translation-files\" title=\"Work with translation files | Angular\">Work with translation files</a> in this guide.</p>\n<p>The same text elements with different <em>meanings</em> are extracted with different IDs.\nFor example, if the word \"right\" uses the following two definitions in two different locations, the word is translated differently and merged back into the application as different translation entries.</p>\n<ul>\n<li><code>correct</code> as in you are \"right\"</li>\n<li><code>direction</code> as in turn \"right\"</li>\n</ul>\n<p>If the same text elements meet the following conditions, the text elements are extracted only once and use the same ID.</p>\n<ul>\n<li>Same meaning or definition</li>\n<li>Different descriptions</li>\n</ul>\n<p>That one translation entry is merged back into the application wherever the same text elements appear.</p>\n</div>\n<h3 id=\"translate-text-not-for-display\">Translate text not for display<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#translate-text-not-for-display\"><i class=\"material-icons\">link</i></a></h3>\n<a id=\"no-element\"></a>\n<p>If you translate non-displayed text using the <code>&#x3C;span></code> tag, you create a new DOM element.\nTo avoid creating a new DOM element, wrap the text in an <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element.\nThe following example shows the <code><a href=\"api/core/ng-container\" class=\"code-anchor\">&#x3C;ng-container></a></code> element transformed into a non-displayed HTML comment.</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-ng-container\">\n&#x3C;ng-container i18n>I don't output any element&#x3C;/ng-container>\n\n</code-example>\n<h3 id=\"mark-element-attributes-for-translations\">Mark element attributes for translations<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-element-attributes-for-translations\"><i class=\"material-icons\">link</i></a></h3>\n<a id=\"translate-attributes\"></a>\n<p>HTML attributes such as <code>title</code> include text that should be translated along with the rest of the displayed text in the template.\nThe following example displays an image with a <code>title</code> attribute.</p>\n<code-example path=\"i18n/doc-files/app.component.html\" region=\"i18n-title\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"logo\" title=\"Angular logo\">\n\n</code-example>\n<p>To mark an attribute for translation, add <code>i18n-</code><em>attribute</em> in which <em>attribute</em> is the attribute to translate.\nThe following example displays how to mark the <code>title</code> attribute on the <code>img</code> tag by adding <code>i18n-title</code>.</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-title-translate\" header=\"src/app/app.component.html\">\n&#x3C;img [src]=\"logo\" i18n-title title=\"Angular logo\" />\n\n</code-example>\n<p>Use <code>i18n-</code><em>attribute</em> with any attribute of any element.\nAlso, to assign a meaning, description, and custom ID, use the <code>i18n-</code><em>attribute</em><code>=\"&#x3C;meaning>|&#x3C;description>@@&#x3C;id>\"</code> syntax.</p>\n<h3 id=\"mark-plurals-and-alternates-for-translation\">Mark plurals and alternates for translation<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-plurals-and-alternates-for-translation\"><i class=\"material-icons\">link</i></a></h3>\n<a id=\"plurals-alternates\"></a>\n<p>Different languages have different pluralization rules and grammatical constructions that increase the difficulty of translation.\nTo simplify translation, use International Components for Unicode (ICU) clauses with regular expressions, such as <code>plural</code> to mark the uses of plural numbers, and <code>select</code> to mark alternate text choices.</p>\n<div class=\"alert is-helpful\">\n<p>The ICU clauses adhere to the <a href=\"https://unicode-org.github.io/icu/userguide/format_parse/messages\" title=\"ICU Message Format - ICU Documentation | Unicode | GitHub\">ICU Message Format</a> specified in the <a href=\"http://cldr.unicode.org/index/cldr-spec/plural-rules\" title=\"Plural Rules | CLDR - Unicode Common Locale Data Repository | Unicode\">CLDR pluralization rules</a>.</p>\n</div>\n<h4 id=\"mark-plurals\">Mark plurals<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-plurals\"><i class=\"material-icons\">link</i></a></h4>\n<a id=\"plural-ICU\"></a>\n<p>Use the <code>plural</code> clause to mark expressions that may not be meaningful if translated word-for-word.</p>\n<p>For example, if you want to display \"updated x minutes ago\" in English, you may want to display \"just now\", \"one minute ago\", or \"<em>x</em> minutes ago\" (with <em>x</em> as the actual number).\nOther languages might express this cardinality differently.\nThe following example displays how to use a <code>plural</code> clause to express each of the three situations.</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-plural\" header=\"src/app/app.component.html\">\n&#x3C;span i18n>Updated {minutes, plural, =0 {just now} =1 {one minute ago} other {{{minutes}} minutes ago}}&#x3C;/span>\n\n</code-example>\n<p>Review the following details in the above example.</p>\n<ul>\n<li>The first parameter, <code>minutes</code>, is bound to the component property (<code>minutes</code>), which determines the number of minutes.</li>\n<li>The second parameter identifies this as a <code>plural</code> translation type.</li>\n<li>The third parameter defines a pattern of pluralization categories and the matching values:\n<ul>\n<li>For zero minutes, use <code>=0 {just now}</code>.</li>\n<li>For one minute, use <code>=1 {one minute}</code>.</li>\n<li>For any unmatched cardinality, use <code>other {{{minutes}} minutes ago}</code>.\nUse HTML markup and <a href=\"guide/glossary#interpolation\" title=\"interpolation - Glossary | Angular\">interpolations</a>, such as <code>{{{minutes}}</code> with the <code>plural</code> clause in expressions.</li>\n<li>After the pluralization category, put the default text (English) within braces (<code>{}</code>).</li>\n</ul>\n</li>\n</ul>\n<p>Pluralization categories include (depending on the language):</p>\n<ul>\n<li><code>=0</code> (or any other number)</li>\n<li><code>zero</code></li>\n<li><code>one</code></li>\n<li><code>two</code></li>\n<li><code>few</code></li>\n<li><code>many</code></li>\n<li><code>other</code></li>\n</ul>\n<div class=\"callout is-important\">\n<header>Locales may not support some pluralization categories</header>\n<p>Many locales don't support some of the pluralization categories.\nFor example, the default locale (<code>en-US</code>) and other locales (such as <code>es</code>) have very simple <code>plural()</code> functions that don't support the <code>few</code> category.\nThe following code example displays the <a href=\"https://github.com/angular/angular/blob/ecffc3557fe1bff9718c01277498e877ca44588d/packages/core/src/i18n/locale_en.ts#L15-L18\" title=\"Line 15 to 18 - angular/packages/core/src/i18n/locale_en.ts | angular/angular | GitHub\">en-US</a> <code>plural()</code> function.</p>\n<code-example path=\"i18n/doc-files/locale_plural_function.ts\" class=\"no-box\" hidecopy=\"\">\nfunction plural(n: number): number {\n  let i = Math.floor(Math.abs(n)), v = n.toString().replace(/^[^.]*\\.?/, '').length;\n  if (i === 1 &#x26;&#x26; v === 0) return 1;\n  return 5;\n}\n\n\n</code-example>\n<p>The function will only ever return 1 (<code>one</code>) or 5 (<code>other</code>).\nThe <code>few</code> category will never match.\nIf none of the pluralization categories match, Angular will try to match <code>other</code>.\nUse <code>other</code> as the standard fallback for a missing category.</p>\n<p>For more information about pluralization categories, see <a href=\"http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Choosing-Plural-Category-Names\" title=\"Choosing Plural Category Names - Plural Rules | CLDR - Unicode Common Locale Data Repository | Unicode\">Choosing plural category names</a> in the CLDR - Unicode Common Locale Data Repository.</p>\n</div>\n<h3 id=\"mark-alternates-and-nested-expressions\">Mark alternates and nested expressions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/i18n-common-prepare#mark-alternates-and-nested-expressions\"><i class=\"material-icons\">link</i></a></h3>\n<a id=\"select-icu\"></a>\n<a id=\"nesting-icus\"></a>\n<p>If you need to display alternate text depending on the value of a variable, you need to translate all of the alternates.</p>\n<p>The <code>select</code> clause, similar to the <code>plural</code> clause, marks choices for alternate text based on your defined string values.\nFor example, the following clause in the component template binds to the <code>gender</code> property of the component, which outputs one of the following string values: <code>\"male\"</code>, <code>\"female\"</code>, or <code>\"other\"</code>.\nThe clause maps the values to the appropriate translations.</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-select\" header=\"src/app/app.component.html\">\n&#x3C;span i18n>The author is {gender, select, male {male} female {female} other {other}}&#x3C;/span>\n\n</code-example>\n<p>Also, nest different clauses together, such as the <code>plural</code> and <code>select</code> clauses.\nThe following example displays nested clauses.</p>\n<code-example path=\"i18n/src/app/app.component.html\" region=\"i18n-nested\" header=\"src/app/app.component.html\">\n&#x3C;span i18n>Updated: {minutes, plural,\n  =0 {just now}\n  =1 {one minute ago}\n  other {{{minutes}} minutes ago by {gender, select, male {male} female {female} other {other}}}}\n&#x3C;/span>\n\n</code-example>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">Last reviewed on Wed Sep 15 2021</div>\n</div>\n\n<!-- links to this doc:\n - api/localize/init/$localize\n - guide/angular-compiler-options\n - guide/i18n-common\n - guide/i18n-common-translation-files\n - guide/i18n-optional-manage-marked-text\n-->\n<!-- links from this doc:\n - api/core/ng-container\n - guide/glossary#interpolation\n - guide/i18n-common-prepare#add-helpful-descriptions-and-meanings\n - guide/i18n-common-prepare#mark-alternates-and-nested-expressions\n - guide/i18n-common-prepare#mark-element-attributes-for-translations\n - guide/i18n-common-prepare#mark-plurals\n - guide/i18n-common-prepare#mark-plurals-and-alternates-for-translation\n - guide/i18n-common-prepare#mark-text-for-translations\n - guide/i18n-common-prepare#prepare-templates-for-translations\n - guide/i18n-common-prepare#translate-text-not-for-display\n - guide/i18n-common-translation-files\n - http://cldr.unicode.org/index/cldr-spec/plural-rules\n - http://cldr.unicode.org/index/cldr-spec/plural-rules#TOC-Choosing-Plural-Category-Names\n - https://github.com/angular/angular/blob/ecffc3557fe1bff9718c01277498e877ca44588d/packages/core/src/i18n/locale_en.ts#L15-L18\n - https://github.com/angular/angular/edit/master/aio/content/guide/i18n-common-prepare.md?message=docs%3A%20describe%20your%20change...\n - https://unicode-org.github.io/icu/userguide/format_parse/messages\n-->"
}